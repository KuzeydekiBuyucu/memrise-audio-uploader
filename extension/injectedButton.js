define([    'jquery',    'uploadManager'], function (    /** JQueryStatic */ $,    /** UploadManager */ uploadManager) {    /**     * @class     */    var AutoUploadBtn = function () {        /**         * @typedef {STATES} AutoUploadBtnState         * @enum {AutoUploadBtnState}         */        this.STATES = {            READY: 1,            UPLOADING: 2,            STOPPING: 3        };        this.$element = undefined;        /**         * @type {AutoUploadBtnState}         */        this.state = undefined;    };    /**     * @return JQueryStatic.DeferredStatic     */    AutoUploadBtn.prototype.injectIntoPage = function () {        var self = this;        var result = $.Deferred();        var observer = new MutationObserver(function (mutations) {            var injected = false;            for (var i = 0; i < mutations[0].addedNodes.length && !injected; i++) {                if (mutations[0].addedNodes[i].nodeType === 1) {                    var $audioLabel = $(mutations[0].addedNodes[i]).find("th.column.audio > span.txt");                    if ($audioLabel.length)                        self.createBtn().insertBefore($audioLabel.next());                        injected = true;                        result.resolve(self);                }            }            if (!injected)                result.reject(self);        });        //noinspection JSCheckFunctionSignatures        observer.observe(            document.body,            { childList: true, subtree: true, attributes: false, characterData: false });    };    AutoUploadBtn.prototype.createBtn = function () {        this.$element =            $('<button>')                .addClass('btn')                .addClass('btn-small')                .click(this.onClick.bind(this));        this.setState(this.STATES.READY);        return this.$element;    };    /**     * @typedef {Object} UpdatingStateOptions     * @property {int} done - done count     * @property {int} all - all count     *     * @param {AutoUploadBtnState} state     * @param {UpdatingStateOptions} [options]     */    AutoUploadBtn.prototype.setState = function(state, options)    {        this.state = state;        switch (state) {            case this.STATES.READY:                this.$element.text('Auto upload');                break;            case this.STATES.UPLOADING:                var progressText = options                    ? options.done + '/' + options.all                    : '0/0';                this.$element.text('Uploading: ' + progressText);                break;            case this.STATES.STOPPING:                this.$element.text('Stopping...');                break;        }    };    AutoUploadBtn.prototype.onClick = function () {        var self = this;        function onUploadingDone() {            self.setState(self.STATES.READY);        }        function onUploadingProgress(done, all) {            if (self.state = self.STATES.UPLOADING)                self.setState(self.STATES.UPLOADING, {done: done, all: all});        }        switch (this.state)        {            case this.STATES.READY:                self.setState(self.STATES.UPLOADING);                uploadManager.startAutoUpload(onUploadingProgress, onUploadingDone);                break;            case this.STATES.UPLOADING:                self.setState(self.STATES.STOPPING);                uploadManager.stopUploading();        }        return false;    };});