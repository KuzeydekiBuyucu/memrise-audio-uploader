var InjectedBtn = function () {    this.STATES = {        READY: 1,        UPLOADING: 2,        STOPPING: 3    };    this.$element = undefined;    this.state = undefined;};InjectedBtn.prototype.createBtn = function () {    this.$element =        $('<button>')            .addClass('btn')            .addClass('btn-small')            .click(this.onClick.bind(this));    this.setState(this.STATES.READY);    return this.$element;};InjectedBtn.prototype.setState = function(state, options){    this.state = state;    switch (state) {        case this.STATES.READY:            this.$element.text('Auto upload');            break;        case this.STATES.UPLOADING:            var progressText = options                ? options.done + '/' + options.all                : '0/0';            this.$element.text('Uploading: ' + progressText);            break;        case this.STATES.STOPPING:            this.$element.text('Stopping...');            break;    }};InjectedBtn.prototype.onClick = function () {    var self = this;    function onUploadingDone() {        self.setState(self.STATES.READY);    }    function onUploadingProgress(done, all) {        if (self.state = self.STATES.UPLOADING)            self.setState(self.STATES.UPLOADING, {done: done, all: all});    }    switch (this.state)    {        case this.STATES.READY:            self.setState(self.STATES.UPLOADING);            uploadManager.startAutoUpload(onUploadingProgress, onUploadingDone);            break;        case this.STATES.UPLOADING:            self.setState(self.STATES.STOPPING);            uploadManager.stopUploading();    }    return false;};var injectedBtn = new InjectedBtn();var observer = new MutationObserver(function (mutations, observer) {    for (var i = 0; i < mutations[0].addedNodes.length; i++) {        if (mutations[0].addedNodes[i].nodeType === 1) {            var $audioLabel = $(mutations[0].addedNodes[i]).find("th.column.audio > span.txt");            if ($audioLabel.length)                injectedBtn.createBtn().insertBefore($audioLabel.next());        }    }});observer.observe(    document.body,    { childList: true, subtree: true, attributes: false, characterData: false });